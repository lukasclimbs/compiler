let parse = ref false
let lex = ref false

let compile arg =
  let filename = arg in
  let tokens   = Lexer.lex (Stream.of_channel (open_in filename)) in
  if !lex then
    Lexer.string_of_token_list tokens |> print_endline
  else
    let (e, _)   = Parser.parse tokens in
  if !parse then
    Parser.string_of_exp e |> print_endline
  else
    Lang.interpret e |> Lang.string_of_exp |> print_endline

let main () =
  begin
    let speclist = [
      ("-lex", Arg.Set lex, "prints the token list generated by the call to lexer.");
      ("-parse", Arg.Set parse, "prints the abstract syntax tree generated by the parser.")]
    in let usage_msg = "Usage: ./compiler.native [flags] [file]" in
    Arg.parse speclist compile usage_msg;
  end

  (*let filename = Sys.argv.(1) in
  let tokens   = Lexer.lex (Stream.of_channel (open_in filename)) in
  let (e, _)   = Parser.parse tokens in
  Lang.interpret e |> Lang.string_of_exp |> print_endline*)

let _ = if !Sys.interactive then () else main ()
